!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
FerNNClassifier::NNConf	FerNNClassifier.cpp	/^void FerNNClassifier::NNConf(const Mat& example, vector<int>& isin,float& rsconf,float& csconf){$/;"	f	class:FerNNClassifier	signature:(const Mat& example, vector<int>& isin,float& rsconf,float& csconf)
FerNNClassifier::evaluateTh	FerNNClassifier.cpp	/^void FerNNClassifier::evaluateTh(const vector<pair<vector<int>,int> >& nXT,const vector<cv::Mat>& nExT){$/;"	f	class:FerNNClassifier	signature:(const vector<pair<vector<int>,int> >& nXT,const vector<cv::Mat>& nExT)
FerNNClassifier::getFeatures	FerNNClassifier.cpp	/^void FerNNClassifier::getFeatures(const cv::Mat& image,const int& scale_idx, vector<int>& fern){$/;"	f	class:FerNNClassifier	signature:(const cv::Mat& image,const int& scale_idx, vector<int>& fern)
FerNNClassifier::measure_forest	FerNNClassifier.cpp	/^float FerNNClassifier::measure_forest(vector<int> fern) {$/;"	f	class:FerNNClassifier	signature:(vector<int> fern)
FerNNClassifier::prepare	FerNNClassifier.cpp	/^void FerNNClassifier::prepare(const vector<Size>& scales){$/;"	f	class:FerNNClassifier	signature:(const vector<Size>& scales)
FerNNClassifier::read	FerNNClassifier.cpp	/^void FerNNClassifier::read(const FileNode& file){$/;"	f	class:FerNNClassifier	signature:(const FileNode& file)
FerNNClassifier::show	FerNNClassifier.cpp	/^void FerNNClassifier::show(){$/;"	f	class:FerNNClassifier	signature:()
FerNNClassifier::trainF	FerNNClassifier.cpp	/^void FerNNClassifier::trainF(const vector<std::pair<vector<int>,int> >& ferns,int resample){$/;"	f	class:FerNNClassifier	signature:(const vector<std::pair<vector<int>,int> >& ferns,int resample)
FerNNClassifier::trainNN	FerNNClassifier.cpp	/^void FerNNClassifier::trainNN(const vector<cv::Mat>& nn_examples){$/;"	f	class:FerNNClassifier	signature:(const vector<cv::Mat>& nn_examples)
FerNNClassifier::update	FerNNClassifier.cpp	/^void FerNNClassifier::update(const vector<int>& fern, int C, int N) {$/;"	f	class:FerNNClassifier	signature:(const vector<int>& fern, int C, int N)
LKTracker	LKTracker.cpp	/^LKTracker::LKTracker(){$/;"	f	class:LKTracker	signature:()
LKTracker::LKTracker	LKTracker.cpp	/^LKTracker::LKTracker(){$/;"	f	class:LKTracker	signature:()
LKTracker::filterPts	LKTracker.cpp	/^bool LKTracker::filterPts(vector<Point2f>& points1,vector<Point2f>& points2){$/;"	f	class:LKTracker	signature:(vector<Point2f>& points1,vector<Point2f>& points2)
LKTracker::normCrossCorrelation	LKTracker.cpp	/^void LKTracker::normCrossCorrelation(const Mat& img1,const Mat& img2, vector<Point2f>& points1, vector<Point2f>& points2) {$/;"	f	class:LKTracker	signature:(const Mat& img1,const Mat& img2, vector<Point2f>& points1, vector<Point2f>& points2)
LKTracker::trackf2f	LKTracker.cpp	/^bool LKTracker::trackf2f(const Mat& img1, const Mat& img2,vector<Point2f> &points1, vector<cv::Point2f> &points2){$/;"	f	class:LKTracker	signature:(const Mat& img1, const Mat& img2,vector<Point2f> &points1, vector<cv::Point2f> &points2)
NNConf	FerNNClassifier.cpp	/^void FerNNClassifier::NNConf(const Mat& example, vector<int>& isin,float& rsconf,float& csconf){$/;"	f	class:FerNNClassifier	signature:(const Mat& example, vector<int>& isin,float& rsconf,float& csconf)
TLD	TLD.cpp	/^TLD::TLD()$/;"	f	class:TLD	signature:()
TLD	TLD.cpp	/^TLD::TLD(const FileNode& file){$/;"	f	class:TLD	signature:(const FileNode& file)
TLD::TLD	TLD.cpp	/^TLD::TLD()$/;"	f	class:TLD	signature:()
TLD::TLD	TLD.cpp	/^TLD::TLD(const FileNode& file){$/;"	f	class:TLD	signature:(const FileNode& file)
TLD::bbOverlap	TLD.cpp	/^float TLD::bbOverlap(const BoundingBox& box1,const BoundingBox& box2){$/;"	f	class:TLD	signature:(const BoundingBox& box1,const BoundingBox& box2)
TLD::bbPoints	TLD.cpp	/^void TLD::bbPoints(vector<cv::Point2f>& points,const BoundingBox& bb){$/;"	f	class:TLD	signature:(vector<cv::Point2f>& points,const BoundingBox& bb)
TLD::bbPredict	TLD.cpp	/^void TLD::bbPredict(const vector<cv::Point2f>& points1,const vector<cv::Point2f>& points2,$/;"	f	class:TLD	signature:(const vector<cv::Point2f>& points1,const vector<cv::Point2f>& points2, const BoundingBox& bb1,BoundingBox& bb2)
TLD::buildGrid	TLD.cpp	/^void TLD::buildGrid(const cv::Mat& img, const cv::Rect& box){$/;"	f	class:TLD	signature:(const cv::Mat& img, const cv::Rect& box)
TLD::clusterBB	TLD.cpp	/^int TLD::clusterBB(const vector<BoundingBox>& dbb,vector<int>& indexes){$/;"	f	class:TLD	signature:(const vector<BoundingBox>& dbb,vector<int>& indexes)
TLD::clusterConf	TLD.cpp	/^void TLD::clusterConf(const vector<BoundingBox>& dbb,const vector<float>& dconf,vector<BoundingBox>& cbb,vector<float>& cconf){$/;"	f	class:TLD	signature:(const vector<BoundingBox>& dbb,const vector<float>& dconf,vector<BoundingBox>& cbb,vector<float>& cconf)
TLD::detect	TLD.cpp	/^void TLD::detect(const cv::Mat& frame){$/;"	f	class:TLD	signature:(const cv::Mat& frame)
TLD::evaluate	TLD.cpp	/^void TLD::evaluate(){$/;"	f	class:TLD	signature:()
TLD::generateNegativeData	TLD.cpp	/^void TLD::generateNegativeData(const Mat& frame){$/;"	f	class:TLD	signature:(const Mat& frame)
TLD::generatePositiveData	TLD.cpp	/^void TLD::generatePositiveData(const Mat& frame, int num_warps){$/;"	f	class:TLD	signature:(const Mat& frame, int num_warps)
TLD::getBBHull	TLD.cpp	/^void TLD::getBBHull(){$/;"	f	class:TLD	signature:()
TLD::getOverlappingBoxes	TLD.cpp	/^void TLD::getOverlappingBoxes(const cv::Rect& box1,int num_closest){$/;"	f	class:TLD	signature:(const cv::Rect& box1,int num_closest)
TLD::getPattern	TLD.cpp	/^void TLD::getPattern(const Mat& img, Mat& pattern,Scalar& mean,Scalar& stdev){$/;"	f	class:TLD	signature:(const Mat& img, Mat& pattern,Scalar& mean,Scalar& stdev)
TLD::getVar	TLD.cpp	/^double TLD::getVar(const BoundingBox& box,const Mat& sum,const Mat& sqsum){$/;"	f	class:TLD	signature:(const BoundingBox& box,const Mat& sum,const Mat& sqsum)
TLD::init	TLD.cpp	/^void TLD::init(const Mat& frame1,const Rect& box,FILE* bb_file){$/;"	f	class:TLD	signature:(const Mat& frame1,const Rect& box,FILE* bb_file)
TLD::learn	TLD.cpp	/^void TLD::learn(const Mat& img){$/;"	f	class:TLD	signature:(const Mat& img)
TLD::processFrame	TLD.cpp	/^void TLD::processFrame(const cv::Mat& img1,const cv::Mat& img2,vector<Point2f>& points1,vector<Point2f>& points2,BoundingBox& bbnext,bool& lastboxfound, bool tl, FILE* bb_file){$/;"	f	class:TLD	signature:(const cv::Mat& img1,const cv::Mat& img2,vector<Point2f>& points1,vector<Point2f>& points2,BoundingBox& bbnext,bool& lastboxfound, bool tl, FILE* bb_file)
TLD::read	TLD.cpp	/^void TLD::read(const FileNode& file){$/;"	f	class:TLD	signature:(const FileNode& file)
TLD::track	TLD.cpp	/^void TLD::track(const Mat& img1, const Mat& img2,vector<Point2f>& points1,vector<Point2f>& points2){$/;"	f	class:TLD	signature:(const Mat& img1, const Mat& img2,vector<Point2f>& points1,vector<Point2f>& points2)
bbOverlap	TLD.cpp	/^float TLD::bbOverlap(const BoundingBox& box1,const BoundingBox& box2){$/;"	f	class:TLD	signature:(const BoundingBox& box1,const BoundingBox& box2)
bbPoints	TLD.cpp	/^void TLD::bbPoints(vector<cv::Point2f>& points,const BoundingBox& bb){$/;"	f	class:TLD	signature:(vector<cv::Point2f>& points,const BoundingBox& bb)
bbPredict	TLD.cpp	/^void TLD::bbPredict(const vector<cv::Point2f>& points1,const vector<cv::Point2f>& points2,$/;"	f	class:TLD	signature:(const vector<cv::Point2f>& points1,const vector<cv::Point2f>& points2, const BoundingBox& bb1,BoundingBox& bb2)
bbcomp	TLD.cpp	/^bool bbcomp(const BoundingBox& b1,const BoundingBox& b2){$/;"	f	signature:(const BoundingBox& b1,const BoundingBox& b2)
buildGrid	TLD.cpp	/^void TLD::buildGrid(const cv::Mat& img, const cv::Rect& box){$/;"	f	class:TLD	signature:(const cv::Mat& img, const cv::Rect& box)
clusterBB	TLD.cpp	/^int TLD::clusterBB(const vector<BoundingBox>& dbb,vector<int>& indexes){$/;"	f	class:TLD	signature:(const vector<BoundingBox>& dbb,vector<int>& indexes)
clusterConf	TLD.cpp	/^void TLD::clusterConf(const vector<BoundingBox>& dbb,const vector<float>& dconf,vector<BoundingBox>& cbb,vector<float>& cconf){$/;"	f	class:TLD	signature:(const vector<BoundingBox>& dbb,const vector<float>& dconf,vector<BoundingBox>& cbb,vector<float>& cconf)
createMask	tld_utils.cpp	/^Mat createMask(const Mat& image, CvRect box){$/;"	f	signature:(const Mat& image, CvRect box)
detect	TLD.cpp	/^void TLD::detect(const cv::Mat& frame){$/;"	f	class:TLD	signature:(const cv::Mat& frame)
drawBox	tld_utils.cpp	/^void drawBox(Mat& image, CvRect box, Scalar color, int thick){$/;"	f	signature:(Mat& image, CvRect box, Scalar color, int thick)
drawPoints	tld_utils.cpp	/^void drawPoints(Mat& image, vector<Point2f> points,Scalar color){$/;"	f	signature:(Mat& image, vector<Point2f> points,Scalar color)
drawing_box	run_tld.cpp	/^bool drawing_box = false;$/;"	v
evaluate	TLD.cpp	/^void TLD::evaluate(){$/;"	f	class:TLD	signature:()
evaluateTh	FerNNClassifier.cpp	/^void FerNNClassifier::evaluateTh(const vector<pair<vector<int>,int> >& nXT,const vector<cv::Mat>& nExT){$/;"	f	class:FerNNClassifier	signature:(const vector<pair<vector<int>,int> >& nXT,const vector<cv::Mat>& nExT)
filterPts	LKTracker.cpp	/^bool LKTracker::filterPts(vector<Point2f>& points1,vector<Point2f>& points2){$/;"	f	class:LKTracker	signature:(vector<Point2f>& points1,vector<Point2f>& points2)
fromfile	run_tld.cpp	/^bool fromfile=false;$/;"	v
generateNegativeData	TLD.cpp	/^void TLD::generateNegativeData(const Mat& frame){$/;"	f	class:TLD	signature:(const Mat& frame)
generatePositiveData	TLD.cpp	/^void TLD::generatePositiveData(const Mat& frame, int num_warps){$/;"	f	class:TLD	signature:(const Mat& frame, int num_warps)
getBBHull	TLD.cpp	/^void TLD::getBBHull(){$/;"	f	class:TLD	signature:()
getFeatures	FerNNClassifier.cpp	/^void FerNNClassifier::getFeatures(const cv::Mat& image,const int& scale_idx, vector<int>& fern){$/;"	f	class:FerNNClassifier	signature:(const cv::Mat& image,const int& scale_idx, vector<int>& fern)
getOverlappingBoxes	TLD.cpp	/^void TLD::getOverlappingBoxes(const cv::Rect& box1,int num_closest){$/;"	f	class:TLD	signature:(const cv::Rect& box1,int num_closest)
getPattern	TLD.cpp	/^void TLD::getPattern(const Mat& img, Mat& pattern,Scalar& mean,Scalar& stdev){$/;"	f	class:TLD	signature:(const Mat& img, Mat& pattern,Scalar& mean,Scalar& stdev)
getVar	TLD.cpp	/^double TLD::getVar(const BoundingBox& box,const Mat& sum,const Mat& sqsum){$/;"	f	class:TLD	signature:(const BoundingBox& box,const Mat& sum,const Mat& sqsum)
gotBB	run_tld.cpp	/^bool gotBB = false;$/;"	v
index_shuffle	tld_utils.cpp	/^vector<int> index_shuffle(int begin,int end){$/;"	f	signature:(int begin,int end)
init	TLD.cpp	/^void TLD::init(const Mat& frame1,const Rect& box,FILE* bb_file){$/;"	f	class:TLD	signature:(const Mat& frame1,const Rect& box,FILE* bb_file)
learn	TLD.cpp	/^void TLD::learn(const Mat& img){$/;"	f	class:TLD	signature:(const Mat& img)
main	run_tld.cpp	/^int main(int argc, char * argv[]){$/;"	f	signature:(int argc, char * argv[])
measure_forest	FerNNClassifier.cpp	/^float FerNNClassifier::measure_forest(vector<int> fern) {$/;"	f	class:FerNNClassifier	signature:(vector<int> fern)
median	tld_utils.cpp	/^float median(vector<float> v)$/;"	f	signature:(vector<float> v)
mouseHandler	run_tld.cpp	/^void mouseHandler(int event, int x, int y, int flags, void *param){$/;"	f	signature:(int event, int x, int y, int flags, void *param)
normCrossCorrelation	LKTracker.cpp	/^void LKTracker::normCrossCorrelation(const Mat& img1,const Mat& img2, vector<Point2f>& points1, vector<Point2f>& points2) {$/;"	f	class:LKTracker	signature:(const Mat& img1,const Mat& img2, vector<Point2f>& points1, vector<Point2f>& points2)
prepare	FerNNClassifier.cpp	/^void FerNNClassifier::prepare(const vector<Size>& scales){$/;"	f	class:FerNNClassifier	signature:(const vector<Size>& scales)
print_help	run_tld.cpp	/^void print_help(char** argv){$/;"	f	signature:(char** argv)
processFrame	TLD.cpp	/^void TLD::processFrame(const cv::Mat& img1,const cv::Mat& img2,vector<Point2f>& points1,vector<Point2f>& points2,BoundingBox& bbnext,bool& lastboxfound, bool tl, FILE* bb_file){$/;"	f	class:TLD	signature:(const cv::Mat& img1,const cv::Mat& img2,vector<Point2f>& points1,vector<Point2f>& points2,BoundingBox& bbnext,bool& lastboxfound, bool tl, FILE* bb_file)
read	FerNNClassifier.cpp	/^void FerNNClassifier::read(const FileNode& file){$/;"	f	class:FerNNClassifier	signature:(const FileNode& file)
read	TLD.cpp	/^void TLD::read(const FileNode& file){$/;"	f	class:TLD	signature:(const FileNode& file)
readBB	run_tld.cpp	/^void readBB(char* file){$/;"	f	signature:(char* file)
read_options	run_tld.cpp	/^void read_options(int argc, char** argv, VideoCapture& capture, FileStorage &fs){$/;"	f	signature:(int argc, char** argv, VideoCapture& capture, FileStorage &fs)
rep	run_tld.cpp	/^bool rep = false;$/;"	v
show	FerNNClassifier.cpp	/^void FerNNClassifier::show(){$/;"	f	class:FerNNClassifier	signature:()
tl	run_tld.cpp	/^bool tl = true;$/;"	v
track	TLD.cpp	/^void TLD::track(const Mat& img1, const Mat& img2,vector<Point2f>& points1,vector<Point2f>& points2){$/;"	f	class:TLD	signature:(const Mat& img1, const Mat& img2,vector<Point2f>& points1,vector<Point2f>& points2)
trackf2f	LKTracker.cpp	/^bool LKTracker::trackf2f(const Mat& img1, const Mat& img2,vector<Point2f> &points1, vector<cv::Point2f> &points2){$/;"	f	class:LKTracker	signature:(const Mat& img1, const Mat& img2,vector<Point2f> &points1, vector<cv::Point2f> &points2)
trainF	FerNNClassifier.cpp	/^void FerNNClassifier::trainF(const vector<std::pair<vector<int>,int> >& ferns,int resample){$/;"	f	class:FerNNClassifier	signature:(const vector<std::pair<vector<int>,int> >& ferns,int resample)
trainNN	FerNNClassifier.cpp	/^void FerNNClassifier::trainNN(const vector<cv::Mat>& nn_examples){$/;"	f	class:FerNNClassifier	signature:(const vector<cv::Mat>& nn_examples)
update	FerNNClassifier.cpp	/^void FerNNClassifier::update(const vector<int>& fern, int C, int N) {$/;"	f	class:FerNNClassifier	signature:(const vector<int>& fern, int C, int N)
video	run_tld.cpp	/^string video;$/;"	v
